#############################################################################################################################################################
# {Rest api-gatway}             
# More info about Function Resource: 
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-restapi.html                        
#############################################################################################################################################################
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  deploy the serverless microservice: discovery register - api mesh:

Parameters:
  StackName:
    Type: String
    Default: "shavika-service"
    Description: "this is api gatway prefix name"
  ApiGatewayStageName:
    Default: v1
    Description : Stage name for the API Gateway
    Type: String  
  AuthenticationFunctionArn:
    Type: String  
    Description : Arn Id for Authentication Lambda Function
  AuthorizationFunctionArn:
    Type: String  
    Description : Arn Id for Authorization Lambda Function
  PlatformWriteFunctionArn:
    Type: String  
    Description : Arn Id for Platform Lambda Function

Resources:
  # <<<<<<< rest-api-gateway >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  restApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      EndpointConfiguration:
        Types:
          - REGIONAL
      Description: An API Gateway with a Lambda Integration
      Name: !Sub "${StackName}-discover-registry"
  # <<<<<<< deployment of rest-api >>>>>>>>>>>
  apiDeployment: 
    Type: AWS::ApiGateway::Deployment
    DependsOn: 
      - platformMethod
      - authMethod
    Properties:
      Description: Deploy the auth rest api
      RestApiId: !Ref restApiGateway
  # <<<<<<< stageing of rest-api {v1} >>>>>>>>>>>
  apiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref apiDeployment
      Description: staging the auth rest api
      RestApiId: !Ref restApiGateway
      StageName: !Ref ApiGatewayStageName

# <<<<<<< Lambda Token Authorizer >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  AuthorizersLambdaToken:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: LambdaAuthorizerToken
      Type: TOKEN
      AuthorizerResultTtlInSeconds: '0'
      RestApiId: !Ref restApiGateway
      IdentitySource: method.request.header.Authorization
      AuthorizerUri: !Sub
        - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations'
        - lambdaArn: !Ref AuthorizationFunctionArn

  # <<<<<<< authorization lambda API-execution-permissions for rest-api >>>>>>>>>>>
  tokenAuthzLambdaApiGatewayInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref AuthorizationFunctionArn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${restApiGateway}/authorizers/${AuthorizersLambdaToken}

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  # <<<<<<< resource {/auth} >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  authRootResource:  
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt restApiGateway.RootResourceId
      PathPart: 'auth'
      RestApiId: !Ref restApiGateway
  # <<<<<<< resource {/auth/{proxy+}} >>>>>>>>>>>
  authProxyResource:  
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref authRootResource
      PathPart: '{proxy+}'
      RestApiId: !Ref restApiGateway
  # <<<<<<< method {ANY} of {/auth/{proxy+}} lambda-proxy-integration >>>>>>>>>>>
  authMethod:  
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations'
          - lambdaArn: !Ref AuthenticationFunctionArn
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 30000  
      OperationName: 'auth lambda function'
      ResourceId: !Ref authProxyResource
      RestApiId: !Ref restApiGateway
  # <<<<<<< platform lambda API-execution-permissions for rest-api >>>>>>>>>>>
  authLambdaApiGatewayInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref AuthenticationFunctionArn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${restApiGateway}/${ApiGatewayStageName}/ANY/auth/{proxy+}

  # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  # <<<<<<< resource {/platform write} >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  platformRootResource:  
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt restApiGateway.RootResourceId
      PathPart: 'platform'
      RestApiId: !Ref restApiGateway
  # <<<<<<< resource {/platform/{proxy+}} >>>>>>>>>>>
  platformProxyResource:  
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref platformRootResource
      PathPart: '{proxy+}'
      RestApiId: !Ref restApiGateway
  # <<<<<<< method {ANY} of {/platform/{proxy+}} lambda-proxy-integration >>>>>>>>>>>
  platformMethod:  
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref AuthorizersLambdaToken
      HttpMethod: ANY
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations'
          - lambdaArn: !Ref PlatformWriteFunctionArn
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 30000  
      OperationName: 'platform lambda function'
      ResourceId: !Ref platformProxyResource
      RestApiId: !Ref restApiGateway
  # <<<<<<< platform lambda API-execution-permissions for rest-api >>>>>>>>>>>
  platformLambdaApiGatewayInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref PlatformWriteFunctionArn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${restApiGateway}/${ApiGatewayStageName}/ANY/platform/{proxy+}

#############################################################################################################################################################
# {output}     
# More info about Output: 
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/outputs-section-structure.html
#############################################################################################################################################################
Outputs:
  RestApiEndPoint:
    Description: "Application end point to access form public"
    Value: !Sub "https://${restApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${apiStage}/*/*"
    Export:
      Name: RestApiEndPoint
