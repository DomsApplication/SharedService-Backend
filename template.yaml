AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  deploy the following lambda functions:
    pdf-converter
    check-contenttype
    pdf-metadata
    ag-s3-zipper
    combined-pdf
    batch-processing

Parameters:
  ParameterInstancePrefix:
    Type: String
    Default: "bulkdownload"
    Description: "Prefix to be used in names of the things created by this stack."
  TagProvisioner:
    Type: String
    Default: "SAM"
    Description: "Tag-Provisioner"
  TagProject:
    Type: String
    Default: "LSICM"
    Description: "Tag-Project"
  TagBusinessUnit:
    Type: String
    Default: "Platform"
    Description: "Tag-BusinessUnit"
  TagBusinessModel:
    Type: String
    Default: "shared"
    Description: "Tag-BusinessModel"
  TagProductVersion:
    Type: String
    Default: "2023.1.0.0"
    Description: "Tag-ProductVersion"
  EventSourceAccountNumber:
    Description: Account number for invoking service execution
    Type: String
    AllowedPattern: ^\d{12}$
  EventSourceAccountNumber1:
    Description: Additional account number for invoking service execution
    Type: String
    Default: ""
  EventSourceAccountNumber2:
    Description: Additional account number for invoking service execution
    Type: String
    Default: ""
  EventSourceAccountNumber3:
    Description: Additional account number for invoking service execution
    Type: String
    Default: ""
  EventSourceAccountNumber4:
    Description: Additional account number for invoking service execution
    Type: String
    Default: ""
  EventSourceInvokeTargetRole:
    Description: IAM role from the event source allows to invoke the target event bridge
    Type: String
    Default: "Amazon_EventBridge_Invoke_Event_Bus_139626693"
  EventSourceInvokeTargetRole1:
    Description: Additional IAM role where trigger the event source allows to invoke the target event bridge
    Type: String
    Default: ""
  EventSourceInvokeTargetRole2:
    Description: Additional IAM role where trigger the event source allows to invoke the target event bridge
    Type: String
    Default: ""
  EventSourceInvokeTargetRole3:
    Description: Additional IAM role where trigger the event source allows to invoke the target event bridge
    Type: String
    Default: ""
  EventSourceInvokeTargetRole4:
    Description: Additional IAM role where trigger the event source allows to invoke the target event bridge
    Type: String
    Default: ""
  CrossAccountS3BukcetName:
    Description: IAM role based cross account s3 bucket name
    Type: String
    Default: ""
  CrossAccountS3BukcetName1:
    Description: Additional IAM role based cross account s3 bucket name
    Type: String
    Default: ""
  CrossAccountS3BukcetName2:
    Description: Additional IAM role based cross account s3 bucket name
    Type: String
    Default: ""
  CrossAccountS3BukcetName3:
    Description: Additional IAM role based cross account s3 bucket name
    Type: String
    Default: ""
  CrossAccountS3BukcetName4:
    Description: Additional IAM role based cross account s3 bucket name
    Type: String
    Default: ""
  CallbackApiURL:
    Description: Client callback endpoint
    Type: String
    Default: "https://lsesdc-dev-2023100.agcloud.bz/lsdms/rest/ETMF2023100DEV_AG/lsdms/eventBridgeAsyc"
  CallbackApiKey:
    Description: Client callback endpoint API key 
    Type: String
    Default: "1cab1fcf-f282-4861-adc7-51019c428363"

Conditions:
  conditionFor1AccFound: !Not [!Equals [!Ref EventSourceAccountNumber1, ""]]
  conditionFor2AccFound: !Not [!Equals [!Ref EventSourceAccountNumber2, ""]]
  conditionFor3AccFound: !Not [!Equals [!Ref EventSourceAccountNumber3, ""]]
  conditionFor4AccFound: !Not [!Equals [!Ref EventSourceAccountNumber4, ""]]
  conditionFor1RoleFound: !Not [!Equals [!Ref EventSourceInvokeTargetRole1, ""]]
  conditionFor2RoleFound: !Not [!Equals [!Ref EventSourceInvokeTargetRole2, ""]]
  conditionFor3RoleFound: !Not [!Equals [!Ref EventSourceInvokeTargetRole3, ""]]
  conditionFor4RoleFound: !Not [!Equals [!Ref EventSourceInvokeTargetRole4, ""]]
  conditionFor1S3Found: !Not [!Equals [!Ref CrossAccountS3BukcetName1, ""]]
  conditionFor2S3Found: !Not [!Equals [!Ref CrossAccountS3BukcetName2, ""]]
  conditionFor3S3Found: !Not [!Equals [!Ref CrossAccountS3BukcetName3, ""]]
  conditionFor4S3Found: !Not [!Equals [!Ref CrossAccountS3BukcetName4, ""]]

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Runtime: java11
    # Tracing: Active
    Tags:
      Provisioner: !Ref TagProvisioner
      Project: !Ref TagProject
      BusinessUnit: !Ref TagBusinessUnit
      BusinessModel: !Ref TagBusinessModel
      ProductVersion: !Ref TagProductVersion

Resources:
##########################################################################
# Shared EventBridge                                                     #
##########################################################################
  SharedServiceEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: SharedServiceEventBus
##########################################################################
#  Shared EventBridg LOG GROUP                                           #
##########################################################################
  LogsRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: !Ref SharedServiceEventBus
      EventPattern:
        source: 
          - 'com.arisglobal.icm'
        account:
          - !Ref AWS::AccountId
      Targets:
        - Arn: !GetAtt LogGroupForEvents.Arn
          Id: LogTarget

  LogGroupForEvents:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/events/sharedservices-eventbus

  LogGroupForEventsPolicy:
    Type: AWS::Logs::ResourcePolicy
    Properties:
      PolicyName: EventBridgeToCWLogsPolicy
      PolicyDocument: !Sub >
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "EventBridgetoCWLogsCreateLogStreamPolicy",
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "events.amazonaws.com"
                ]
              },
              "Action": [
                "logs:CreateLogStream"
              ],
              "Resource": [
                "${LogGroupForEvents.Arn}"
              ]
            },
            {
              "Sid": "EventBridgetoCWLogsPutLogEventsPolicy",
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "events.amazonaws.com"
                ]
              },
              "Action": [
                "logs:PutLogEvents"
              ],
              "Resource": [
                "${LogGroupForEvents.Arn}"
              ],
              "Condition": {
                "ArnEquals": {"AWS:SourceArn": "${LogsRule.Arn}"}
              }
            }
          ]
        }
##########################################################################
# Shared EventBridge cross account target policy                         #
##########################################################################
  CrossAccountPublishStatement:
    Type: AWS::Events::EventBusPolicy
    Properties:
      EventBusName: !Ref SharedServiceEventBus
      StatementId: "CrossAccountPublish"
      Statement:
        Effect: "Allow"
        Principal:
          AWS:
            - !Sub ${EventSourceAccountNumber}
            - !If [ conditionFor1AccFound, !Sub "${EventSourceAccountNumber1}", !Sub "${EventSourceAccountNumber}"]
            - !If [ conditionFor2AccFound, !Sub "${EventSourceAccountNumber2}", !Sub "${EventSourceAccountNumber}"]
            - !If [ conditionFor3AccFound, !Sub "${EventSourceAccountNumber3}", !Sub "${EventSourceAccountNumber}"]
            - !If [ conditionFor4AccFound, !Sub "${EventSourceAccountNumber4}", !Sub "${EventSourceAccountNumber}"]
        Action: "events:*"
        Resource: !GetAtt SharedServiceEventBus.Arn
        Condition:
          StringEquals:
            "events:source": ["com.arisglobal.icm"]

  CrossAccountPutEventStatement:
    Type: AWS::Events::EventBusPolicy
    Properties:
      EventBusName: !Ref SharedServiceEventBus
      StatementId: "AllowCrossAccountPutEvents"
      Statement:
        Effect: "Allow"
        Principal:
          AWS:
            - !Sub arn:aws:iam::${EventSourceAccountNumber}:role/service-role/${EventSourceInvokeTargetRole}
            - !If [ conditionFor1RoleFound, !Sub "arn:aws:iam::${EventSourceAccountNumber1}:role/service-role/${EventSourceInvokeTargetRole1}",
                    !Sub "arn:aws:iam::${EventSourceAccountNumber}:role/service-role/${EventSourceInvokeTargetRole}"]
            - !If [ conditionFor2RoleFound, !Sub "arn:aws:iam::${EventSourceAccountNumber2}:role/service-role/${EventSourceInvokeTargetRole2}",
                    !Sub "arn:aws:iam::${EventSourceAccountNumber}:role/service-role/${EventSourceInvokeTargetRole}" ]
            - !If [ conditionFor3RoleFound, !Sub "arn:aws:iam::${EventSourceAccountNumber3}:role/service-role/${EventSourceInvokeTargetRole3}",
                    !Sub "arn:aws:iam::${EventSourceAccountNumber}:role/service-role/${EventSourceInvokeTargetRole}" ]
            - !If [ conditionFor4RoleFound, !Sub "arn:aws:iam::${EventSourceAccountNumber4}:role/service-role/${EventSourceInvokeTargetRole4}",
                    !Sub "arn:aws:iam::${EventSourceAccountNumber}:role/service-role/${EventSourceInvokeTargetRole}" ]
        Action: "events:PutEvents"
        Resource: !GetAtt SharedServiceEventBus.Arn
        Condition:
          StringEquals:
            "events:detail-type": ["BulkdownloadEvent"]
            "events:source": ["com.arisglobal.icm"]
##########################################################################
#   Step Fuction                                                         #
##########################################################################
  BulkDownloadStateMachine:
    Type: AWS::Serverless::StateMachine # More info about State Machine Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-statemachine.html
    Properties:
      DefinitionUri: statemachine/binder_bulk_download.asl.json
      DefinitionSubstitutions:
        SharedServiceEventBusName: !Ref SharedServiceEventBus
        S3ZipperFunctionArn: !GetAtt S3ZipperFunction.Arn
        S3CombinePdfFunctionArn: !GetAtt S3CombinePdfFunction.Arn
        PdfMetadataFunctionArn: !GetAtt PdfMetadataFunction.Arn
        CallbackApiFunctionArn: !GetAtt CallbackApiFunction.Arn
        BatchProcessingFunctionArn: !GetAtt BatchProcessingFunction.Arn
        # PdfConverterFunctionArn: !GetAtt PdfConverterFunction.Arn
        DDBPutItem: !Sub arn:${AWS::Partition}:states:::dynamodb:putItem
        DDBTable: !Ref BulkDownloadTracingTable
        APIID: !Ref CallbackApiURL
        APIKEY: !Ref CallbackApiKey
      Policies: # Find out more about SAM policy templates: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - DynamoDBWritePolicy: 
            TableName: !Ref BulkDownloadTracingTable
        - DynamoDBReadPolicy: 
            TableName: !Ref BulkDownloadTracingTable
        - LambdaInvokePolicy:
            FunctionName: !Ref S3ZipperFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref S3CombinePdfFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref PdfMetadataFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref BatchProcessingFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref CallbackApiFunction
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref SharedServiceEventBus
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'logs:CreateLogDelivery'
                - 'logs:GetLogDelivery'
                - 'logs:UpdateLogDelivery'
                - 'logs:DeleteLogDelivery'
                - 'logs:ListLogDeliveries'
                - 'logs:PutResourcePolicy'
                - 'logs:DescribeResourcePolicies'
                - 'logs:DescribeLogGroups'
                - 'cloudwatch:PutMetricData'
              Resource: '*'
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt  BulkDownloadStateMachineLogGroup.Arn
        Level: ALL
        IncludeExecutionData: True
      Tracing:
        Enabled: True
      Events:
        BulkDownloadEventRule:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref SharedServiceEventBus
            Pattern:
              detail-type:
                  - BulkdownloadEvent
      Tags:
        Provisioner: !Ref TagProvisioner
        Project: !Ref TagProject
        BusinessUnit: !Ref TagBusinessUnit
        BusinessModel: !Ref TagBusinessModel
        ProductVersion: !Ref TagProductVersion

##########################################################################
#  STEP FUNCTION LOG GROUP                                               #
##########################################################################
  BulkDownloadStateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 3
      LogGroupName: !Join [ "", ["/aws/states/", !Ref ParameterInstancePrefix,"-", "statemachine-logs"]]
##########################################################################
#   Lambda source and target S3 buckets                                  #
##########################################################################
  SourceBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join [ "-", [!Ref ParameterInstancePrefix, "sourcebucket",!Ref AWS::AccountId]]

  TargetBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join [ "-", [!Ref ParameterInstancePrefix,"targetbucket", !Ref AWS::AccountId]]
##########################################################################################
#   IAM role for the Lambda function that allow cross account S3 bucket access policy #
##########################################################################################
  LambdaS3Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: AllowCrossS3BucketAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: s3bucketAccess
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                  - s3:GetObjectVersion
                  - s3:PutObjectAcl
                  - s3:PutLifecycleConfiguration
                  - s3:GetLifecycleConfiguration
                  - s3:DeleteObject
                  - s3:GetBucketLocation
                Resource:
                  - !Sub arn:aws:s3:::${ParameterInstancePrefix}-sourcebucket-${AWS::AccountId}
                  - !Sub arn:aws:s3:::${ParameterInstancePrefix}-sourcebucket-${AWS::AccountId}/*
                  - !Sub arn:aws:s3:::${ParameterInstancePrefix}-targetbucket-${AWS::AccountId}
                  - !Sub arn:aws:s3:::${ParameterInstancePrefix}-targetbucket-${AWS::AccountId}/*
                  - !Sub arn:aws:s3:::${CrossAccountS3BukcetName}
                  - !Sub arn:aws:s3:::${CrossAccountS3BukcetName}/*
                  - !If [ conditionFor1S3Found, !Sub "arn:aws:s3:::${CrossAccountS3BukcetName1}", !Sub "arn:aws:s3:::${CrossAccountS3BukcetName}"]
                  - !If [ conditionFor1S3Found, !Sub "arn:aws:s3:::${CrossAccountS3BukcetName1}/*", !Sub "arn:aws:s3:::${CrossAccountS3BukcetName}/*"]
                  - !If [ conditionFor2S3Found, !Sub "arn:aws:s3:::${CrossAccountS3BukcetName2}", !Sub "arn:aws:s3:::${CrossAccountS3BukcetName}"]
                  - !If [ conditionFor2S3Found, !Sub "arn:aws:s3:::${CrossAccountS3BukcetName2}/*", !Sub "arn:aws:s3:::${CrossAccountS3BukcetName}/*"]
                  - !If [ conditionFor3S3Found, !Sub "arn:aws:s3:::${CrossAccountS3BukcetName3}", !Sub "arn:aws:s3:::${CrossAccountS3BukcetName}"]
                  - !If [ conditionFor3S3Found, !Sub "arn:aws:s3:::${CrossAccountS3BukcetName3}/*", !Sub "arn:aws:s3:::${CrossAccountS3BukcetName}/*"]
                  - !If [ conditionFor4S3Found, !Sub "arn:aws:s3:::${CrossAccountS3BukcetName4}", !Sub "arn:aws:s3:::${CrossAccountS3BukcetName}"]
                  - !If [ conditionFor4S3Found, !Sub "arn:aws:s3:::${CrossAccountS3BukcetName4}/*", !Sub "arn:aws:s3:::${CrossAccountS3BukcetName}/*"]
              - Sid: cloudwatchLogs
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - "*"

##########################################################################
#   Lambda Function for zipping S3 objects                               #
##########################################################################
  S3ZipperFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: functions-java/ag-s3-zipper
      Handler: com.arisglobal.s3zipper.App::handleRequest
      Role: !GetAtt LambdaS3Role.Arn
      MemorySize: 10240
      Timeout: 900
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1 # More info about tiered compilation https://aws.amazon.com/blogs/compute/optimizing-aws-lambda-function-performance-for-java/
          TARGET_BUCKET_NAME: !Ref TargetBucket
      AutoPublishAlias: live
      SnapStart:
        ApplyOn: PublishedVersions
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref SourceBucket # bucket name without arn
        - S3CrudPolicy:
            BucketName: !Ref TargetBucket
  ##########################################################################
  #   Lambda Function for combine PDF S3 objects                           #
  ##########################################################################
  S3CombinePdfFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: functions-java/ag-combine-pdf
      Handler: com.arisglobal.combinepdf.App::handleRequest
      Role: !GetAtt LambdaS3Role.Arn
      MemorySize: 4096
      EphemeralStorage:
        Size: 4096
      Timeout: 900
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1 # More info about tiered compilation https://aws.amazon.com/blogs/compute/optimizing-aws-lambda-function-performance-for-java/
          TARGET_BUCKET_NAME: !Ref TargetBucket
      AutoPublishAlias: live
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref SourceBucket # bucket name without arn
        - S3CrudPolicy:
            BucketName: !Ref TargetBucket
##########################################################################
#   Lambda Function for generating metadata PDF                          #
##########################################################################
  PdfMetadataFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: functions-java/pdf-metadata
      Handler: com.arisglobal.pdfmetadata.App::handleRequest
      Role: !GetAtt LambdaS3Role.Arn
      MemorySize: 1024
      Timeout: 600
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1 # More info about tiered compilation https://aws.amazon.com/blogs/compute/optimizing-aws-lambda-function-performance-for-java/
          TARGET_BUCKET_NAME: !Ref TargetBucket
      AutoPublishAlias: live
      SnapStart:
        ApplyOn: PublishedVersions
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref SourceBucket # bucket name without arn
        - S3CrudPolicy:
            BucketName: !Ref TargetBucket
  ##########################################################################
  #   Lambda Function for merge multiple file into single file by BATCH processing #
  ##########################################################################
  BatchProcessingFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: functions-java/ag-batch-process
      Handler: com.arisglobal.batchprocess.App::handleRequest
      Role: !GetAtt LambdaS3Role.Arn
      MemorySize: 1024
      Timeout: 900
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1 # More info about tiered compilation https://aws.amazon.com/blogs/compute/optimizing-aws-lambda-function-performance-for-java/
          TARGET_BUCKET_NAME: !Ref TargetBucket
      AutoPublishAlias: live
      SnapStart:
        ApplyOn: PublishedVersions
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref SourceBucket # bucket name without arn
        - S3CrudPolicy:
            BucketName: !Ref TargetBucket

##########################################################################
#   Dynamo DB Table that stores bulk download events for auditing        #
##########################################################################
  BulkDownloadTracingTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        -
          AttributeName: "id"
          AttributeType: "S"
        -
          AttributeName: "tenantId"
          AttributeType: "S"
      BillingMode: PAY_PER_REQUEST
      KeySchema: 
        - 
          AttributeName: "id"
          KeyType: "HASH"
        - 
          AttributeName: "tenantId"
          KeyType: "RANGE"
      TableName: !Join ["",[!Ref ParameterInstancePrefix,"-","states"]] 
##########################################################################
#   Lambda Function for callback api                                     #
##########################################################################
  CallbackApiFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: functions-java/ag-callback-api
      Handler: com.arisglobal.callbackapi.App::handleRequest
      Role: !GetAtt LambdaS3Role.Arn
      MemorySize: 256
      Timeout: 600
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1 # More info about tiered compilation https://aws.amazon.com/blogs/compute/optimizing-aws-lambda-function-performance-for-java/
          TARGET_BUCKET_NAME: !Ref TargetBucket
      AutoPublishAlias: live
      SnapStart:
        ApplyOn: PublishedVersions
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref SourceBucket # bucket name without arn
        - S3CrudPolicy:
            BucketName: !Ref TargetBucket

##########################################################################
#   EventBridge API Destination for sending response back to the client  #
##########################################################################
  CallbackApiConnection:
    Type: AWS::Events::Connection
    Properties:
      AuthorizationType: API_KEY
      Description: 'Callback API connection with an API key'
      AuthParameters:
        ApiKeyAuthParameters:
          ApiKeyName: "x-api-key"
          ApiKeyValue: !Ref CallbackApiKey

  CallbackApiDestination:
    Type: AWS::Events::ApiDestination
    Properties:
      Name: 'CallbackApiDestination'
      ConnectionArn: !GetAtt CallbackApiConnection.Arn
      InvocationEndpoint: !Ref CallbackApiURL
      HttpMethod: POST
      InvocationRateLimitPerSecond: 10

  EventBridgeTargetRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - sts:AssumeRole      
      Policies:
        - PolicyName: AllowAPIdestinationAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 'events:InvokeApiDestination'
                Resource: !GetAtt CallbackApiDestination.Arn

  APIDestinationEventRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "EventRule"
      State: "ENABLED"
      EventBusName: !Ref SharedServiceEventBus
      EventPattern: 
        source:
          - com.arisglobal.sharedservices.bulkdownload
        detail-type:
          - BulkdownloadCompleted       
      Targets: 
        - Arn: !GetAtt CallbackApiDestination.Arn
          RoleArn: !GetAtt EventBridgeTargetRole.Arn
          Id: "CallbackApiDestinationRule"
          DeadLetterConfig:  ################## Configure DLQ
            Arn: !GetAtt DLQ.Arn
          RetryPolicy:  ################## Configure Retry Policy
            MaximumEventAgeInSeconds: 60 # Must be greater than 60
            MaximumRetryAttempts: 1
##########################################################################
#   EventBridge DLQ to catch failed delivered messages                   #
##########################################################################       
  DLQ:
    Type: AWS::SQS::Queue

##########################################################################
#   Outputs                                                              #
##########################################################################
Outputs:
  # BulkDownloadStateMachineHourlyTradingSchedule is an implicit Schedule event rule created out of Events key under Serverless::StateMachine
  # Find out more about other implicit resources you can reference within SAM
  # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-specification-generated-resources.html
  BulkDownloadStateMachineArn:
    Description: "Bulk Download state machine ARN"
    Value: !Ref BulkDownloadStateMachine
  
  # The following output resources are needed only if the stepfunction uses a separate template.yaml
  # PdfConverterFunction:
  #   Description: "PDF Converter Lambda Function ARN"
  #   Value: !GetAtt PdfConverterFunction.Arn
  #   Export: 
  #     Name: !Join ["-", [!Ref "AWS::StackName","pdfconverter-function-arn"]]
  # PdfConverterFunctionIamRole:
  #   Description: "Implicit IAM Role created for PDF Converter function"
  #   Value: !GetAtt PdfConverterFunctionRole.Arn
  #   Export: 
  #     Name: !Join ["-", [!Ref "AWS::StackName","pdfconverter-function-role-arn"]]
  